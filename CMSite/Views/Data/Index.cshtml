@model CMSite.Models.CustomerDataSearchModel

@{
    ViewBag.Title = "Index";
    var KeywordKindList = (IEnumerable<SelectListItem>)ViewBag.KeywordKindList;
}
<h2 class="text-success">客戶資料管理-Index</h2>
@using (Html.BeginForm("Index", "Data", FormMethod.Get))
{
    <div class="form-inline">
        @Html.DropDownListFor(model => model.KeywordKind, KeywordKindList, new { id = "ddlKeywordKind", @class = "form-control" })
        @Html.TextBoxFor(model => model.Keyword, new { placeholder = "請輸入關鍵字", id = "txtKeyword", @class = "form-control" })
        @Html.HiddenFor(model => model.CustomerTypeFilter, new { id = "hdfCustomerTypeFilter" })
        @Html.HiddenFor(model => model.IsSort, new { id="hdfIsSOrt", @Value= Model.IsSort })
        @Html.HiddenFor(model => model.CurrentSortColumn, new { id = "hdfCurrentSortColumn", @Value = Model.CurrentSortColumn })
        @Html.HiddenFor(model => model.SortColumn, new { id = "hdfSortColumn" })
        @Html.HiddenFor(model => model.SortDirection, new { id = "hdfSortDirection", @Value = Model.SortDirection })
        <button type="submit" id="btnSearch" class="btn btn-primary">
            <span class="glyphicon glyphicon-search"></span>
            <span>搜尋</span>
        </button>
        @Html.ActionLink("匯出表格", "Export",
                         new
                         {
                             KeywordKind = Model.KeywordKind,
                             Keyword = Model.Keyword,
                             CustomerTypeFilter = Model.CustomerTypeFilter,
                             CurrentSortColumn = Model.CurrentSortColumn,
                             SortColumn = Model.SortColumn,
                             SortDirection = Model.SortDirection
                         },
                         new { @Class = "btn btn-info right" })
    </div>
}
<br />
<p>
    @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-primary" })
</p>
<table class="table">
    <tr>
        <th>
            <a href="#" onclick="SortColumn('@Html.NameFor(o=>o.DataModel.First().CustomerName)');">
                @Html.DisplayNameFor(model => model.DataModel.First().CustomerName)
            </a>
        </th>
        <th>
            <a href="#" onclick="SortColumn('@Html.NameFor(o=>o.DataModel.First().TaxNumber)');">
                @Html.DisplayNameFor(model => model.DataModel.First().TaxNumber)
            </a>
        </th>
        <th>
            <a href="#" onclick="SortColumn('@Html.NameFor(o=>o.DataModel.First().Telephone)');">
                @Html.DisplayNameFor(model => model.DataModel.First().Telephone)
            </a>
        </th>
        <th>
            <a href="#" onclick="SortColumn('@Html.NameFor(o=>o.DataModel.First().Fax)');">
                @Html.DisplayNameFor(model => model.DataModel.First().Fax)
            </a>
        </th>
        <th>
            <a href="#" onclick="SortColumn('@Html.NameFor(o=>o.DataModel.First().Address)');">
                @Html.DisplayNameFor(model => model.DataModel.First().Address)
            </a>
        </th>
        <th>
            <a href="#" onclick="SortColumn('@Html.NameFor(o=>o.DataModel.First().Email)');">
                @Html.DisplayNameFor(model => model.DataModel.First().Email)
            </a>
        </th>
        <th>
            <a href="#" onclick="SortColumn('@Html.NameFor(o=>o.DataModel.First().Category)');">
                @Html.DisplayNameFor(model => model.DataModel.First().Category)
            </a>
            <div class="btn-group">
                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <span class="caret"></span>
                </button>
                <ul id="ulCustomerTypeFilter" class="dropdown-menu"></ul>
            </div>
        </th>
        <th>
            @Html.AntiForgeryToken()
        </th>
    </tr>

    @foreach (var item in Model.DataModel)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.CustomerName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TaxNumber)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Telephone)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Fax)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Address)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Email)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Category)
            </td>
            <td>
                <div class="form-inline">
                    @Html.ActionLink("編輯", "Edit", new { id = item.Id }, new { @class = "btn btn-warning" })
                    @Html.ActionLink("明細", "Details", new { id = item.Id }, new { @class = "btn btn-info" })
                    <button type="button" class="deleteBtn btn btn-danger" data-id="@item.Id">刪除</button>
                </div>
            </td>
        </tr>
    }
</table>


@section Scripts{
    <script type="text/javascript">
        $(function () {
            QueryCustomerType();

            $(".deleteBtn").click(function () {
                if (confirm("你確定將此筆與其關聯的資料都刪除嗎？"))
                {
                    var dataId = $(this).attr("data-id");
                    var token = $("input[name='__RequestVerificationToken']").val();
                    $.ajax({
                        method: "POST",
                        url: "@Url.Action("Delete", "Data")",
                        data: { id: dataId, __RequestVerificationToken: token },
                        success: function (data, textStatus, jqXHR) {
                            $("#btnSearch").click();
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            alert("Request failed: [" + textStatus + "] " + errorThrown);
                        }
                    });
                }
            });
        });

        function QueryCustomerType()
        {
            var getDataAPI = "@Url.Action("GetCustomerType", "Data")";
            $.getJSON(getDataAPI, function (data) {
                var items = [];
                items.push("<li onclick=\"FilterCustomerType('');\"><a href='#'>取消篩選</a></li>");
                $.each(data, function (key, value) {
                    items.push("<li onclick=\"FilterCustomerType('" + value + "');\"><a href='#'>" + value + "</a></li>");
                });

                $("#ulCustomerTypeFilter").html(items.join(""));
            })
            .fail(function () {
                alert("error");
            });
        }

        function SortColumn(sortColumn) {
            $("#hdfSortColumn").val(sortColumn);
            $("#hdfIsSOrt").val(true);
            $("#btnSearch").click();
        }

        function FilterCustomerType(customerType) {
            $("#hdfCustomerTypeFilter").val(customerType);
            $("#btnSearch").click();
        }

    </script>
}


